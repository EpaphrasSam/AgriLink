generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  username    String         @unique
  email       String         @unique
  password    String
  role        Role
  farmer      Farmer?        
  reviews     Review[]
  forumPosts  ForumPost[]
  messages    Message[] @relation("UserMessages")
  orders      Order[]
  conversations Conversation[]
  createdForum Forum[] @relation("CreatedForum")
  createdAt   DateTime @default(now())
}

model Farmer {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  user                User           @relation(fields: [userId], references: [id])
  userId              String         @unique @db.ObjectId
  name                String
  bio                 String
  about               String
  region              String
  town                String
  image               String
  slug                String        @unique
  products            Product[]
  conversations       Conversation[]
  messages            Message[] @relation("FarmerMessages")
  reviews             Review[]
  orders              Order[] @relation("FarmerOrders")
  paystackAccountId   String?
  createdAt           DateTime @default(now())
}

model Product {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  category    String
  images      String[]
  slug        String         @unique
  farmer      Farmer         @relation(fields: [farmerId], references: [id])
  farmerId    String         @db.ObjectId
  reviews     Review[]
  orders      Order[]
  createdAt   DateTime @default(now())
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderID     String   @unique
  createdAt   DateTime @default(now())
  amount      Float
  address     String
  contact     String
  quantity    Int
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
  productId   String   @db.ObjectId
  status      String
  farmer      Farmer     @relation("FarmerOrders", fields: [farmerId], references: [id])
  farmerId    String   @db.ObjectId
}

model Review {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  rating         Float?
  comment        String
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  product        Product?      @relation(fields: [productId], references: [id])
  productId      String?       @db.ObjectId
  farmer         Farmer?       @relation(fields: [farmerId], references: [id])
  farmerId       String?       @db.ObjectId
  isFarmer       Boolean      @default(false)
  replies        Review[]     @relation("ReviewReplies")
  parentReview   Review?      @relation("ReviewReplies", fields: [parentReviewId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentReviewId String?      @db.ObjectId
  createdAt   DateTime @default(now())
}

model Message {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  content         String?
  image           String?
  senderUserId    String?        @db.ObjectId
  senderFarmerId  String?        @db.ObjectId
  senderUser      User?          @relation("UserMessages", fields: [senderUserId], references: [id])
  senderFarmer    Farmer?        @relation("FarmerMessages", fields: [senderFarmerId], references: [id])
  conversation    Conversation   @relation(fields: [conversationId], references: [id])
  conversationId  String         @db.ObjectId
  createdAt       DateTime       @default(now())
}

model Conversation {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  messages      Message[]
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  farmer        Farmer         @relation(fields: [farmerId], references: [id])
  farmerId      String         @db.ObjectId
  createdAt     DateTime       @default(now())
}

model Forum {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  summary     String
  posts       ForumPost[]
  createdBy   User         @relation("CreatedForum", fields: [createdById], references: [id])
  createdById String       @db.ObjectId
  createdAt   DateTime @default(now())
}

model ForumPost {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  isFarmer    Boolean      @default(false)
  forum       Forum        @relation(fields: [forumId], references: [id])
  forumId     String       @db.ObjectId
  replies     ForumPost[]  @relation("ForumPostReplies")
  parentPost  ForumPost?   @relation("ForumPostReplies", fields: [parentPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentPostId String?     @db.ObjectId
  createdAt   DateTime @default(now())
}

enum Role {
  FARMER
  CONSUMER
}